"""Add PlanFeedbackAction enum to feedback table

Revision ID: 507969308c7f
Revises: 
Create Date: 2025-07-18 19:41:19.756618

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '507969308c7f'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


# def upgrade() -> None:
#     """Upgrade schema."""
#     # ### commands auto generated by Alembic - please adjust! ###
#     op.add_column('feedback', sa.Column('suggested_changes', sa.String(), nullable=True))
#     op.add_column('feedback', sa.Column('plan_feedback_action', sa.Enum('APPROVE', 'REQUEST_REFINEMENT', name='PlanFeedbackAction'), nullable=False))
#     # ### end Alembic commands ###

def upgrade() -> None:
    # 1. Create the ENUM type manually
    plan_feedback_action_enum = sa.Enum('APPROVE', 'REQUEST_REFINEMENT', name='planfeedbackaction')
    plan_feedback_action_enum.create(op.get_bind())

    # 2. Add both columns
    op.add_column('feedback', sa.Column('suggested_changes', sa.String(), nullable=True))
    op.add_column('feedback', sa.Column('plan_feedback_action', plan_feedback_action_enum, nullable=False))

# def downgrade() -> None:
#     """Downgrade schema."""
#     # ### commands auto generated by Alembic - please adjust! ###
#     op.drop_column('feedback', 'plan_feedback_action')
#     op.drop_column('feedback', 'suggested_changes')
#     # ### end Alembic commands ###


def downgrade() -> None:
    # 1. Drop the column first
    op.drop_column('feedback', 'plan_feedback_action')
    op.drop_column('feedback', 'suggested_changes')

    # 2. Drop the ENUM type
    sa.Enum(name='planfeedbackaction').drop(op.get_bind())