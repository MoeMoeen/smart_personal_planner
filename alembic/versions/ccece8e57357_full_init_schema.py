"""full init schema

Revision ID: ccece8e57357
Revises: 
Create Date: 2025-09-05 16:44:15.028749

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ccece8e57357'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('episodic_memory',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('goal_id', sa.Integer(), nullable=True),
    sa.Column('content', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_episodic_memory_id'), 'episodic_memory', ['id'], unique=False)
    op.create_index(op.f('ix_episodic_memory_user_id'), 'episodic_memory', ['user_id'], unique=False)
    op.create_table('procedural_memory',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('content', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_procedural_memory_id'), 'procedural_memory', ['id'], unique=False)
    op.create_index(op.f('ix_procedural_memory_user_id'), 'procedural_memory', ['user_id'], unique=False)
    op.create_table('semantic_memory',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('content', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_semantic_memory_id'), 'semantic_memory', ['id'], unique=False)
    op.create_index(op.f('ix_semantic_memory_user_id'), 'semantic_memory', ['user_id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=True),
    sa.Column('telegram_user_id', sa.BigInteger(), nullable=True),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_telegram_user_id'), 'users', ['telegram_user_id'], unique=True)
    op.create_table('capacity_snapshots',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('period_type', sa.String(), nullable=False),
    sa.Column('period_key', sa.String(), nullable=False),
    sa.Column('limit_hours', sa.String(), nullable=False),
    sa.Column('scheduled_hours', sa.String(), nullable=False),
    sa.Column('actual_hours', sa.String(), nullable=True),
    sa.Column('utilization_rate', sa.String(), nullable=True),
    sa.Column('snapshot_datetime', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_capacity_snapshots_user_id'), 'capacity_snapshots', ['user_id'], unique=False)
    op.create_table('goals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_goals_id'), 'goals', ['id'], unique=False)
    op.create_table('plans',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('goal_id', sa.Integer(), nullable=False),
    sa.Column('is_approved', sa.Boolean(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('goal_type', sa.Enum('project', 'habit', 'hybrid', name='goaltype'), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=False),
    sa.Column('progress', sa.Integer(), nullable=True),
    sa.Column('progress_status', sa.Enum('NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', 'BLOCKED', 'ON_HOLD', name='progressstatus'), nullable=False),
    sa.Column('recurrence_cycle', sa.Enum('DAILY', 'WEEKLY', 'MONTHLY', 'QUARTERLY', 'YEARLY', name='recurrencecycle'), nullable=True),
    sa.Column('goal_frequency_per_cycle', sa.Integer(), nullable=True),
    sa.Column('goal_recurrence_count', sa.Integer(), nullable=True),
    sa.Column('default_estimated_time_per_cycle', sa.Integer(), nullable=True),
    sa.Column('source', sa.Enum('AI_GENERATED', 'MANUAL_CREATED', 'IMPORTED', 'REFINED', 'TEMPLATE', name='plansource'), nullable=False),
    sa.Column('ai_version', sa.String(), nullable=True),
    sa.Column('refinement_round', sa.Integer(), nullable=True),
    sa.Column('source_plan_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['goal_id'], ['goals.id'], ),
    sa.ForeignKeyConstraint(['source_plan_id'], ['plans.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_plans_approval_status', 'plans', ['is_approved', 'goal_type'], unique=False)
    op.create_index('ix_plans_date_range', 'plans', ['start_date', 'end_date'], unique=False)
    op.create_index(op.f('ix_plans_id'), 'plans', ['id'], unique=False)
    op.create_index('ix_plans_progress_status', 'plans', ['progress_status', 'goal_type'], unique=False)
    op.create_index('ix_plans_user_goal_type', 'plans', ['user_id', 'goal_type'], unique=False)
    op.create_table('feedback',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('plan_id', sa.Integer(), nullable=False),
    sa.Column('feedback_text', sa.String(), nullable=False),
    sa.Column('suggested_changes', sa.JSON(), nullable=True),
    sa.Column('plan_feedback_action', sa.Enum('APPROVE', 'REQUEST_REFINEMENT', name='PlanFeedbackAction'), nullable=False),
    sa.Column('feedback_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('goal_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['goal_id'], ['goals.id'], ),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('plan_id')
    )
    op.create_index(op.f('ix_feedback_id'), 'feedback', ['id'], unique=False)
    op.create_index('ix_feedback_plan_action', 'feedback', ['plan_id', 'plan_feedback_action'], unique=False)
    op.create_index('ix_feedback_user_created', 'feedback', ['user_id', 'created_at'], unique=False)
    op.create_table('habit_cycles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('goal_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('plan_id', sa.Integer(), nullable=False),
    sa.Column('cycle_label', sa.String(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=False),
    sa.Column('progress', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['goal_id'], ['goals.id'], ),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_habit_cycles_id'), 'habit_cycles', ['id'], unique=False)
    op.create_table('goal_occurrences',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('plan_id', sa.Integer(), nullable=False),
    sa.Column('occurrence_order', sa.Integer(), nullable=False),
    sa.Column('estimated_effort', sa.Integer(), nullable=True),
    sa.Column('completed', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['cycle_id'], ['habit_cycles.id'], ),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_goal_occurrences_id'), 'goal_occurrences', ['id'], unique=False)
    op.create_table('tasks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('plan_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('due_date', sa.Date(), nullable=True),
    sa.Column('estimated_time', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('TODO', 'IN_PROGRESS', 'COMPLETED', 'BLOCKED', 'CANCELLED', name='taskexecutionstatus'), nullable=False),
    sa.Column('completed', sa.Boolean(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('blocked_reason', sa.String(), nullable=True),
    sa.Column('goal_id', sa.Integer(), nullable=True),
    sa.Column('cycle_id', sa.Integer(), nullable=True),
    sa.Column('occurrence_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['cycle_id'], ['habit_cycles.id'], ),
    sa.ForeignKeyConstraint(['goal_id'], ['goals.id'], ),
    sa.ForeignKeyConstraint(['occurrence_id'], ['goal_occurrences.id'], ),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tasks_id'), 'tasks', ['id'], unique=False)
    op.create_index('ix_tasks_plan_due_date', 'tasks', ['plan_id', 'due_date'], unique=False)
    op.create_index('ix_tasks_status_due_date', 'tasks', ['status', 'due_date'], unique=False)
    op.create_index('ix_tasks_user_status', 'tasks', ['user_id', 'status'], unique=False)
    op.create_table('scheduled_tasks',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('goal_id', sa.Integer(), nullable=False),
    sa.Column('plan_id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=True),
    sa.Column('occurrence_id', sa.Integer(), nullable=True),
    sa.Column('start_datetime', sa.DateTime(), nullable=False),
    sa.Column('end_datetime', sa.DateTime(), nullable=False),
    sa.Column('estimated_minutes', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('status', sa.Enum('SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'OVERDUE', name='scheduledtaskstatus'), nullable=False),
    sa.Column('scheduling_reason', sa.String(), nullable=True),
    sa.Column('scheduling_algorithm', sa.String(), nullable=True),
    sa.Column('scheduling_confidence', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('source_plan_version', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['cycle_id'], ['habit_cycles.id'], ),
    sa.ForeignKeyConstraint(['goal_id'], ['goals.id'], ),
    sa.ForeignKeyConstraint(['occurrence_id'], ['goal_occurrences.id'], ),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_scheduled_tasks_end_datetime'), 'scheduled_tasks', ['end_datetime'], unique=False)
    op.create_index('ix_scheduled_tasks_goal_datetime', 'scheduled_tasks', ['goal_id', 'start_datetime'], unique=False)
    op.create_index(op.f('ix_scheduled_tasks_goal_id'), 'scheduled_tasks', ['goal_id'], unique=False)
    op.create_index('ix_scheduled_tasks_plan_datetime', 'scheduled_tasks', ['plan_id', 'start_datetime'], unique=False)
    op.create_index(op.f('ix_scheduled_tasks_plan_id'), 'scheduled_tasks', ['plan_id'], unique=False)
    op.create_index(op.f('ix_scheduled_tasks_start_datetime'), 'scheduled_tasks', ['start_datetime'], unique=False)
    op.create_index('ix_scheduled_tasks_status', 'scheduled_tasks', ['status'], unique=False)
    op.create_index(op.f('ix_scheduled_tasks_task_id'), 'scheduled_tasks', ['task_id'], unique=False)
    op.create_index('ix_scheduled_tasks_user_datetime', 'scheduled_tasks', ['user_id', 'start_datetime'], unique=False)
    op.create_index(op.f('ix_scheduled_tasks_user_id'), 'scheduled_tasks', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_scheduled_tasks_user_id'), table_name='scheduled_tasks')
    op.drop_index('ix_scheduled_tasks_user_datetime', table_name='scheduled_tasks')
    op.drop_index(op.f('ix_scheduled_tasks_task_id'), table_name='scheduled_tasks')
    op.drop_index('ix_scheduled_tasks_status', table_name='scheduled_tasks')
    op.drop_index(op.f('ix_scheduled_tasks_start_datetime'), table_name='scheduled_tasks')
    op.drop_index(op.f('ix_scheduled_tasks_plan_id'), table_name='scheduled_tasks')
    op.drop_index('ix_scheduled_tasks_plan_datetime', table_name='scheduled_tasks')
    op.drop_index(op.f('ix_scheduled_tasks_goal_id'), table_name='scheduled_tasks')
    op.drop_index('ix_scheduled_tasks_goal_datetime', table_name='scheduled_tasks')
    op.drop_index(op.f('ix_scheduled_tasks_end_datetime'), table_name='scheduled_tasks')
    op.drop_table('scheduled_tasks')
    op.drop_index('ix_tasks_user_status', table_name='tasks')
    op.drop_index('ix_tasks_status_due_date', table_name='tasks')
    op.drop_index('ix_tasks_plan_due_date', table_name='tasks')
    op.drop_index(op.f('ix_tasks_id'), table_name='tasks')
    op.drop_table('tasks')
    op.drop_index(op.f('ix_goal_occurrences_id'), table_name='goal_occurrences')
    op.drop_table('goal_occurrences')
    op.drop_index(op.f('ix_habit_cycles_id'), table_name='habit_cycles')
    op.drop_table('habit_cycles')
    op.drop_index('ix_feedback_user_created', table_name='feedback')
    op.drop_index('ix_feedback_plan_action', table_name='feedback')
    op.drop_index(op.f('ix_feedback_id'), table_name='feedback')
    op.drop_table('feedback')
    op.drop_index('ix_plans_user_goal_type', table_name='plans')
    op.drop_index('ix_plans_progress_status', table_name='plans')
    op.drop_index(op.f('ix_plans_id'), table_name='plans')
    op.drop_index('ix_plans_date_range', table_name='plans')
    op.drop_index('ix_plans_approval_status', table_name='plans')
    op.drop_table('plans')
    op.drop_index(op.f('ix_goals_id'), table_name='goals')
    op.drop_table('goals')
    op.drop_index(op.f('ix_capacity_snapshots_user_id'), table_name='capacity_snapshots')
    op.drop_table('capacity_snapshots')
    op.drop_index(op.f('ix_users_telegram_user_id'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_semantic_memory_user_id'), table_name='semantic_memory')
    op.drop_index(op.f('ix_semantic_memory_id'), table_name='semantic_memory')
    op.drop_table('semantic_memory')
    op.drop_index(op.f('ix_procedural_memory_user_id'), table_name='procedural_memory')
    op.drop_index(op.f('ix_procedural_memory_id'), table_name='procedural_memory')
    op.drop_table('procedural_memory')
    op.drop_index(op.f('ix_episodic_memory_user_id'), table_name='episodic_memory')
    op.drop_index(op.f('ix_episodic_memory_id'), table_name='episodic_memory')
    op.drop_table('episodic_memory')
    # ### end Alembic commands ###
