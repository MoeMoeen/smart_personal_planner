"""Plan-centric architecture: move execution logic from Goals to Plans

Revision ID: 7d60de5c9c03
Revises: a15b4918cbeb
Create Date: 2025-08-07 10:14:11.611076

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7d60de5c9c03'
down_revision: Union[str, Sequence[str], None] = 'a15b4918cbeb'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema for Plan-centric architecture."""
    # ### STEP 1: Modify existing tables before dropping dependencies ###
    
    # Update goal_occurrences table
    op.alter_column('goal_occurrences', 'plan_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    
    # Update goals table (remove execution logic fields)
    op.add_column('goals', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('goals', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.drop_column('goals', 'progress')
    op.drop_column('goals', 'goal_type') 
    op.drop_column('goals', 'start_date')
    
    # Update habit_cycles table (change from habit_id to goal_id)
    op.add_column('habit_cycles', sa.Column('goal_id', sa.Integer(), nullable=True))
    op.alter_column('habit_cycles', 'plan_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    
    # ### STEP 2: Remove foreign key constraints before dropping tables ###
    op.drop_constraint('habit_cycles_habit_id_fkey', 'habit_cycles', type_='foreignkey')
    
    # ### STEP 3: Drop the old goal subtype tables ###
    op.drop_table('habit_goals')
    op.drop_table('project_goals')
    
    # ### STEP 4: Add new foreign key and clean up habit_cycles ###
    op.create_foreign_key(None, 'habit_cycles', 'goals', ['goal_id'], ['id'])
    op.drop_column('habit_cycles', 'habit_id')
    
    # ### STEP 5: Add execution logic columns to plans table ###
    op.add_column('plans', sa.Column('goal_type', sa.Enum('project', 'habit', 'hybrid', name='goaltype'), nullable=False))
    op.add_column('plans', sa.Column('start_date', sa.Date(), nullable=False))
    op.add_column('plans', sa.Column('end_date', sa.Date(), nullable=False))
    op.add_column('plans', sa.Column('progress', sa.Integer(), nullable=True))
    op.add_column('plans', sa.Column('recurrence_cycle', sa.String(), nullable=True))
    op.add_column('plans', sa.Column('goal_frequency_per_cycle', sa.Integer(), nullable=True))
    op.add_column('plans', sa.Column('goal_recurrence_count', sa.Integer(), nullable=True))
    op.add_column('plans', sa.Column('default_estimated_time_per_cycle', sa.Integer(), nullable=True))
    op.add_column('plans', sa.Column('source', sa.String(), nullable=False))
    op.add_column('plans', sa.Column('ai_version', sa.String(), nullable=True))
    
    # ### STEP 6: Update other table constraints ###
    op.alter_column('tasks', 'plan_id',
               existing_type=sa.INTEGER(),
               nullable=False)
               
    # ### STEP 7: Fix telegram user ID index ###
    op.drop_constraint('users_telegram_user_id_key', 'users', type_='unique')
    op.drop_index('ix_users_telegram_user_id', table_name='users')
    op.create_index('ix_users_telegram_user_id', 'users', ['telegram_user_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_telegram_user_id'), table_name='users')
    op.create_index(op.f('ix_users_telegram_user_id'), 'users', ['telegram_user_id'], unique=False)
    op.create_unique_constraint(op.f('users_telegram_user_id_key'), 'users', ['telegram_user_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('tasks', 'plan_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('plans', 'ai_version')
    op.drop_column('plans', 'source')
    op.drop_column('plans', 'default_estimated_time_per_cycle')
    op.drop_column('plans', 'goal_recurrence_count')
    op.drop_column('plans', 'goal_frequency_per_cycle')
    op.drop_column('plans', 'recurrence_cycle')
    op.drop_column('plans', 'progress')
    op.drop_column('plans', 'end_date')
    op.drop_column('plans', 'start_date')
    op.drop_column('plans', 'goal_type')
    op.add_column('habit_cycles', sa.Column('habit_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'habit_cycles', type_='foreignkey')
    op.create_foreign_key(op.f('habit_cycles_habit_id_fkey'), 'habit_cycles', 'habit_goals', ['habit_id'], ['id'])
    op.alter_column('habit_cycles', 'plan_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('habit_cycles', 'goal_id')
    op.add_column('goals', sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False))
    op.add_column('goals', sa.Column('goal_type', postgresql.ENUM('project', 'habit', name='goaltype'), autoincrement=False, nullable=False))
    op.add_column('goals', sa.Column('progress', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_column('goals', 'updated_at')
    op.drop_column('goals', 'created_at')
    op.alter_column('goal_occurrences', 'plan_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_table('habit_goals',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('goal_recurrence_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('goal_frequency_per_cycle', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('recurrence_cycle', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('default_estimated_time_per_cycle', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id'], ['goals.id'], name=op.f('habit_goals_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('habit_goals_pkey'))
    )
    op.create_table('project_goals',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id'], ['goals.id'], name=op.f('project_goals_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('project_goals_pkey'))
    )
    # ### end Alembic commands ###
